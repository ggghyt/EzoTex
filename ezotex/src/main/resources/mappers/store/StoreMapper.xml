<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ezotex.store.mappers.StoreMapper">
	
	<!-- 제품 목록 -->
	<select id="productInfoList" resultType="ProductInfoListDTO">
		SELECT *
		FROM (
       			SELECT a.*, ROWNUM as rn
       			FROM (
						SELECT product_code,
						       product_name,
						       unit_price
						FROM product_info
						WHERE product_type = 'PT02'
						ORDER BY product_code
			    )a
    		WHERE ROWNUM <![CDATA[ <= ]]> #{end}) page
		WHERE page.rn <![CDATA[ >= ]]> #{start}
	</select>
	
	
	<!-- 제품 목록 total 구하기 -->
	<select id="productInfoTotal">
		SELECT count(*)
		FROM product_info
		WHERE product_type = 'PT02'
	</select>
	
	<!-- 제품 색상 -->
	<select id="productColor">
		SELECT product_color
		FROM product_option
		WHERE product_code = #{productCode}
	</select>
	
	
	
	<!-- =================================================== 반품으로 수정해야됨 =================================================== -->
	
	<!-- 납품 코드 기반 납품목록 -->
	<select id="DeliveryList" resultType="StoreDeliveryDTO">
		SELECT *
		FROM (
       			SELECT a.*, ROWNUM as rn
       			FROM (
                		SELECT 
               	               d.delivery_code, 
                               d.order_date, 
                               d.dedt, 
                               COUNT(i.product_code) AS delivery_qy
                        FROM delivery d 
                        JOIN delivery_details i ON d.delivery_code = i.delivery_code
                        WHERE d.company_se = 'CP02'
                        AND i.delivery_qy > 0
                        GROUP BY d.delivery_code, d.order_date, d.dedt
                        ORDER BY d.delivery_code 
               )a
    		WHERE ROWNUM <![CDATA[ <= ]]> #{end}) page
		WHERE page.rn <![CDATA[ >= ]]> #{start}
	</select>
	
	
	
	<select id="MtDeliveryList">
		SELECT *
		FROM (
       			SELECT a.*, ROWNUM as rn
       			FROM (
                		SELECT 
               	               d.delivery_code, 
                               d.order_date, 
                               d.dedt, 
                               COUNT(i.product_code) AS delivery_qy
                        FROM delivery d 
                        JOIN delivery_details i ON d.delivery_code = i.delivery_code
                        WHERE d.company_se = 'CP01'
                        AND i.delivery_qy > 0
                        GROUP BY d.delivery_code, d.order_date, d.dedt
                        ORDER BY d.delivery_code 
               )a
    		WHERE ROWNUM <![CDATA[ <= ]]> #{end}) page
		WHERE page.rn <![CDATA[ >= ]]> #{start}
	</select>
	
	
	
	<!-- 납품 코드 기반 납품제품 총 수량 -->
	<!-- <select id="deliveryQy" resultType="StoreDeliveryDTO">
		SELECT count(t.product_code) as deliveryQy
		FROM delivery_details t join delivery d
		ON t.delivery_code = d.delivery_code
	</select> -->
	
	
	<!-- 페이징(납품입고리스트(제품)) total -->
	<select id="getCount">
		select count(delivery_code)
		from delivery
		WHERE company_se = 'CP02'
	</select>
	
	<!-- 페이징(납품입고리스트(자재)) total -->
	<select id="getMtCount">
		select count(delivery_code)
		from delivery
		WHERE company_se = 'CP01'
	</select>
	
	
	<!-- 납품코드를 기반으로 입고해야될 제품 기본정보 리스트 -->
	<select id="findByDeliveryCode" resultType="StoreDeliveryDetailsDTO">
		SELECT p.product_code,
		       p.product_name,
		       SUM(d.request_qy) as requestQy,
		       SUM(d.delivery_qy) - NVL(sub.totalQy,0) AS productQy,
		       sub.totalQy,
		       NVL(SUM(DISTINCT e.error_qy),0) AS errorTotalQy
		FROM delivery_details d
		JOIN product_info p ON d.product_code = p.product_code
		LEFT JOIN (
		    SELECT delivery_code, product_code, SUM(store_qy) AS totalQy
		    FROM inventory
		    GROUP BY delivery_code, product_code
		) sub ON d.delivery_code = sub.delivery_code AND d.product_code = sub.product_code
		LEFT JOIN inventory_error e ON sub.delivery_code = e.lot
		WHERE d.product_se = 'PT02'
		AND d.delivery_code = #{deliveryCode}
		GROUP BY p.product_code, p.product_name, request_qy, sub.totalQy
	</select>
	
	
	<!-- 납품코드를 기반으로 입고해야될 자재 기본정보 리스트 -->
	<select id="findByMtDeliveryCode">
		SELECT p.product_code,
		       p.product_name,
		       o.product_color,
		       SUM(d.delivery_qy) as productQy,
		       SUM(DISTINCT i.store_qy) as totalQy
		FROM delivery_details d join product_info p
		on d.product_code = p.product_code
		left join inventory i
		on d.delivery_code = i.delivery_code
		left join product_option o
		on p.product_code = o.product_code
		WHERE d.product_se = 'PT01'
		AND d.delivery_code = #{deliveryCode}
		group by p.product_code,
		         p.product_name,
		         o.product_color
	</select>
	
	
	<!-- 제품코드별 사이즈 -->
	<select id="findBySizeInventory" resultType="StoreDeliveryDetailsDTO">
		SELECT get_comm(product_size) as product_size_info
		FROM product_option
		WHERE product_code = #{productCode}
		GROUP BY product_size
        ORDER BY product_size
	</select>
	
	<!-- 제품 코드 기반 옵션,요청 수량 리스트 -->
	<select id="findByProductCode">
		with temp as
		     (SELECT   d.product_color,
		               'sz' || get_comm(d.product_size) as product_size,
		               d.product_code,
		               d.delivery_qy - NVL(i.store_qy,0) as delivery_qy
		        FROM DELIVERY_DETAILS d left join inventory i
                on d.delivery_code = i.delivery_code
                            and d.product_size = i.product_size
                            and d.product_color = i.product_color
                            and d.product_code = i.product_code
		        WHERE d.product_code = #{productCode}
		        AND d.delivery_code = #{deliveryCode})
		select * from temp
		pivot( sum(delivery_qy)
		       for product_size in (
		       <foreach collection="list" item="size" separator=",">
                '${'sz' + size.productSizeInfo}' AS ${'sz' + size.productSizeInfo}
               </foreach>)
		)pvt
	</select>
	
	
	<!-- 제품옵션별 등록 -->
	<insert id="InsertProduct" parameterType="SizeDTO">
	  INSERT INTO inventory(lot,
                            product_code,
                            store_qy,
                            inventory_qy,
                            product_color,
                            product_size,
                            store_charger,
                            storage_location,
                            store_date,
                            product_se,
                            delivery_code) 
		VALUES(concat(TO_CHAR(sysdate, 'yyyyMMdd'),LPAD(inventory_lot_seq.nextval, 4,'0')),
		       #{list.productCode},
		       #{list.productQy},
		       #{list.productQy},
		       #{list.color},
		       #{list.sizeCode},
		       #{name},
		       'test',
		       sysdate,
		       'PT02',
		       #{list.deliveryCode})
	</insert>
	
	<!-- 자재 등록 -->
	<insert id="MtInsertProduct" parameterType="StoreDeliveryDetailsDTO">
		INSERT INTO inventory(lot,
		                      product_code,
		                      store_qy,
		                      inventory_qy,
		                      product_color,
		                      store_charger,
		                      storage_location,
		                      store_date,
		                      product_se,
		                      delivery_code)
		VALUES(concat(TO_CHAR(sysdate,'yyyyMMdd'),LPAD(mt_lot_seq.nextval, 4, '0')),
		       #{list.productCode},
		       #{list.productInsertQy},
		       #{list.productInsertQy},
		       #{list.productColor},
		       #{name},
		       'test',
		       sysdate,
		       'PT01',
		       #{list.deliveryCode})  
	</insert>
	
	<!-- 입고된 수량, 불량처리 수량 , 요청수량 -->
	<select id="storeQy">
		SELECT NVL(sum(i.store_qy),0) + NVL(sum(e.error_qy),0) as total,
		       sum(d.delivery_qy) as request_qy
		FROM inventory i left join inventory_error e
		on i.delivery_code = e.delivery_code
		           and i.product_code = e.product_code
		left join delivery_details d
		on i.delivery_code = d.delivery_code
		WHERE i.delivery_code = #{deliveryCode}
	</select>
	
	<!-- 입고량에 따른 수정 -->
	<update id="UpdateDelivery" parameterType="SizeDTO">
		UPDATE delivery
		SET delivery_status = 'DS05'
		WHERE delivery_code = #{deliveryCode}
	</update>
	
	<!-- =================================================== 반품으로 수정해야됨 =================================================== -->
	
	
</mapper>