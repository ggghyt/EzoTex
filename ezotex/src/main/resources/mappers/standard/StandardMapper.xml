<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ezotex.standard.mappers.StandardMapper">
<select id="searchId" resultType="int">
select count(*) as count
from
(select emp_id as id
from emp
union
select company_id
from company)
where id = #{id}
</select>

<select id="deptList" parameterType="DeptDTO">
select dept_code, 
       dept_name,
       dept_no
from dept
order by dept_no asc
</select>

<select id="positionList" parameterType="PositionDTO">
select position_code, 
       position_name, 
       position_no
from position
order by position_no asc
</select>

<insert id="insertEmp" parameterType="EmpDTO">
insert into emp
values(concat('EMP', LPAD(EMP_SEQ.nextval, 4, 0)), 
       #{empId}, 
       #{empPassword}, 
       #{empName}, 
       #{empPhone}, 
       #{empEmail}, 
       #{addressSeq}, 
       #{deptCode}, 
       #{positionCode}, 
       #{empImg}, 
       sysdate, 
       null, 
       '1'
)
</insert>

<insert id="insertAddress" parameterType="EmpDTO">
insert into address_list
values(ADDRESS_LIST_SEQ.nextval, 
       #{addressNumber}, 
       #{addressMain}, 
       #{addressInfo},
       #{addressReference}
)
</insert>

<insert id="insertCompany" parameterType="CompanyDTO">
insert into company
values(concat('COM', LPAD(COMPANY_SEQ.nextval, 4, 0)), 
       #{companyId}, 
       #{companyPassword}, 
       #{companyExponent}, 
       #{companyCharger}, 
       #{companyPhone}, 
       #{companyEmail}, 
       #{companyName}, 
       #{addressSeq}, 
       #{companyNumber}, 
       #{companyImg}, 
       #{section},
       #{distance}, 
       #{requireTime}, 
       #{addressCode}, 
       '1'
)
</insert>

<select id="findDivyAddress" parameterType="DivyAddressDTO" resultType="String">
select *
from(
select address_code
from divy_address
where do like '%' || #{main} || '%'
and si like '%' || #{sub} || '%'
)
where rownum = 1
</select>

<select id="findAddressSeq" resultType="String">
select *
from(
     select address_seq
     from address_list
     order by 1 desc
)
where rownum = 1
</select>

<select id="idApproval" resultType="String">
select approval
from (
select emp_id as id,
       approval
from emp
union
select company_id,
       approval
from company
)
where id = #{id}
</select>

<select id="findNameEmail" resultType="ResetPasswordDTO">
select *
from(
select emp_id as id,
       emp_name as name, 
       emp_email as email
from emp
union
select company_id, 
       company_name, 
       company_email
from company
)
where id = #{id}
</select>

<update id="passwordEmpUpdate">
update emp
set emp_password = #{password}
where emp_id = #{id}
</update>

<update id="passwordCompanyUpdate">
update company
set company_password = #{password}
where company_id = #{id}
</update>

<select id="productListAll" resultType="map" parameterType="ProductListInfoDTO">
select product_info.product_code, 
       product_name, 
       common_code_details.code_name as product_type_name, 
       product_info.product_type, 
       lclas, 
       sclas, 
       unit_price, 
       vl, 
       img, 
       product_info.unit_name,
       common_code_details_2.code_name as unit_name_name
from product_info
left join product_category
on product_info.product_code = product_category.product_code
join common_code_details
on product_info.product_type = common_code_details.comm_detail_code
join common_code_details common_code_details_2
on product_info.unit_name = common_code_details_2.comm_detail_code
where product_info.product_code like '%' || upper(#{productCode}) || '%'
<if test='productName != null and productName != ""'> and product_name like '%' || #{productName} || '%' </if>
<if test='productType != null and productType != ""'> and product_info.product_type like '%' || #{productType} || '%' </if>
<if test='lclas != null and lclas != ""'> and lclas like '%' || #{lclas} || '%' </if>
<if test='sclas != null and sclas != ""'> and sclas like '%' || #{sclas} || '%' </if>
<if test='minPrice != null and minPrice != ""'> and unit_price <![CDATA[ >= ]]> #{minPrice} </if>
<if test='maxPrice != null and maxPrice != ""'> and unit_price <![CDATA[ <= ]]> #{maxPrice} </if>
order by 1
</select>

<select id="getCount" parameterType="ProductListInfoDTO">
select count(product_info.product_code)
from product_info
left join product_category
on product_info.product_code = product_category.product_code
join common_code_details
on product_info.product_type = common_code_details.comm_detail_code
where product_info.product_code like '%' || upper(#{productCode}) || '%'
<if test='productName != null and productName != ""'> and product_name like '%' || #{productName} || '%' </if>
<if test='productType != null and productType != ""'> and product_info.product_type like '%' || #{productType} || '%' </if>
<if test='lclas != null and lclas != ""'> and lclas like '%' || #{lclas} || '%' </if>
<if test='sclas != null and sclas != ""'> and sclas like '%' || #{sclas} || '%' </if>
<if test='minPrice != null and minPrice != ""'> and unit_price <![CDATA[ >= ]]> #{minPrice} </if>
<if test='maxPrice != null and maxPrice != ""'> and unit_price <![CDATA[ <= ]]> #{maxPrice} </if>
</select>

<select id="categoryLclas">
select distinct lclas
from product_category
</select>

<select id="categorySclas">
select distinct sclas
from product_category
where lclas = #{lclas}
</select>

<select id="unitNameList">
select code_name as unit_name, 
       comm_detail_code as unit_name_name
from common_code_details
where comm_code = 'UN'
</select>

<insert id="ProductInfoInsert" parameterType="ProductListInfoDTO">
insert into product_info
values(concat('PRD', LPAD(PRODUCT_CODE_SEQ.nextval, 4, 0)), 
       #{productName}, 
       #{productType}, 
       #{unitPrice}, 
       #{vl}, 
       #{img}, 
       #{unitName}
)
</insert>

<update id="ProductInfoUpdate">
update product_info
set product_name = #{productName}, 
    product_type = #{productType}, 
    unit_price = #{unitPrice}, 
    vl = #{vl}, 
    img = #{img}, 
    unit_name = #{unitName}
where product_code = #{productCode}
</update>

<select id="productCategory" resultType="ProductCategoryDTO">
select *
from product_category
where product_code = #{productCode}
</select>

<delete id="productCategoryDelete">
delete product_category
where product_code = #{productCode}
</delete>

<insert id="productCategoryInsert" parameterType="ProductCategoryDTO">
insert into product_category
values (#{lclas}, 
        #{sclas}, 
        #{productCode}
)
</insert>

<select id="searchCom" resultType="CompanyDTO">
select company_code, 
       company_name
from company
where company_name like '%' || #{companyName} || '%'
</select>

<select id="optionSizeList" resultType="ProductOptionDTO">
select comm_detail_code as product_code, 
       code_name as size_name
from common_code_details
where comm_detail_code like 'SI%'
</select>

<select id="productOption" resultType="ProductOptionDTO">
select option_code, 
       product_code, 
       product_color, 
       product_size, 
       code_name as size_name, 
       unit_price, 
       discontinued
from product_option
join common_code_details
on product_option.product_size = common_code_details.comm_detail_code
where product_code = #{productCode}
</select>

<select id="countOption" parameterType="ProductOptionDTO">
select count(*)
from product_option
where product_code = #{productCode}
and product_color = #{productColor}
and product_size = #{productSize}
</select>

<update id="updateOption" parameterType="ProductOptionDTO">
update product_option
set discontinued = #{discontinued}
    <if test='unitPrice > 0'> , unit_price = #{unitPrice} </if>
where product_code = #{productCode}
and product_color = #{productColor}
and product_size = #{productSize}
</update>

<insert id="insertOption" parameterType="ProductOptionDTO">
insert into product_option
values(PRODUCT_OPTION_SEQ.nextval, 
       #{productCode}, 
       #{productColor}, 
       #{productSize}, 
       #{unitPrice}, 
       #{discontinued}
)
</insert>

<select id="storageList" resultType="StorageDTO">
select *
from storage
</select>

<select id="storageInfoList" resultType="StorageDTO">
select *
from storage_info
where storage_code = #{storageCode}
</select>

<select id="storageVl">
select NVL(sum(storage_product.qy * product_info.vl), 0) as total
from storage_product
join product_info
on storage_product.product_code = product_info.product_code
where storage_info_code = #{storageInfoCode}
</select>

<insert id="insertStorage">
insert into storage
values(concat('STO', LPAD(STORAGE_SEQ.nextval, 4, 0)), 
       #{storageName}, 
       5, 
       5
)
</insert>

<update id="updateStorage" parameterType="StorageDTO">
update storage
set storage_code = #{storageCode}, 
    max_row = #{maxRow}, 
    max_col = #{maxCol}
where storage_code = #{storageCode}
</update>

<insert id="insertStorageInfo" parameterType="StorageDTO">
insert into storage_info
values(STORAGE_INFO_SEQ.nextval, 
       #{storageCode}, 
       #{selectRow}, 
       #{selectCol}, 
       #{storageInfoName}, 
       #{vl}
)
</insert>

<update id="updateStorageInfo" parameterType="StorageDTO">
update storage_info
set storage_info_name = #{storageInfoName},
    vl = #{vl}
where storage_code = #{storageCode}
and select_row = #{selectRow}
and select_col = #{selectCol}
</update>

<select id="StorageProductList" resultType="StorageProductDTO">
select lot, 
       product_name, 
       product_color, 
       code_name as product_size, 
       qy, 
       store_date, 
       store_charger_name
from storage_product
join product_option
on storage_product.option_code = product_option.option_code
join common_code_details
on product_option.product_size = common_code_details.comm_detail_code
where storage_info_code = #{storageInfoCode}
</select>

<select id="findStorageInfoCode" parameterType="StorageDTO">
select storage_info_code
from storage_info
where storage_code = #{storageCode}
and select_row = #{selectRow}
and select_col = #{selectCol}
</select>

<select id="SafetyStockList" parameterType="SafetyStockDTO">
select *
from safety_stock
where product_code = #{productCode}
order by 1 desc
</select>

<update id="updateSafety" parameterType="SafetyStockDTO">
update safety_stock
set qy = #{qy}
where safety_stock_month = #{safetyStockMonth}
and product_code = #{productCode}
</update>

<select id="infomationList" resultType="map">
select info_no, 
       title, 
       content, 
       writer, 
       emp_name as writer_name, 
       write_date, 
       edit_date
from infomation
join emp
on infomation.writer = emp.emp_code
</select>

<select id="getInfomationCount">
select count(*)
from infomation
</select>

<select id="infomationNum" resultType="InfomationDTO">
select info_no, 
       title, 
       content, 
       writer, 
       emp_name as writer_name, 
       write_date, 
       edit_date
from infomation
join emp
on infomation.writer = emp.emp_code
where info_no = #{num}
</select>

<update id="infomationUpdate">
update infomation
set title = #{title}, 
    content = #{content},
    edit_date = sysdate
where info_no = #{num}
</update>

<insert id="infomationInsert">
insert into infomation
values(INFO_NO_SEQ.nextval, 
       #{title}, 
       #{content}, 
       #{userCode}, 
       sysdate, 
       null
)
</insert>

</mapper>