<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ezotex.returns.mappers.ReturnsMapper">
	<select id="getDeliveryList">
		SELECT
		D.DELIVERY_CODE,
		MAX(D.COMPANY_SE) AS
		COMPANY_SE,
		MAX(D.PRODUCT_ORDER_CODE) AS PRODUCT_ORDER_CODE,
		MAX(D.MTRIL_ORDER_CODE) AS MTRIL_ORDER_CODE,
		MAX(D.COMPANY_CODE) AS
		COMPANY_CODE,
		MAX(D.COMPANY_NAME) AS COMPANY_NAME,
		MAX(D.ORDER_DATE) AS
		ORDER_DATE,
		MAX(D.DEDT) AS DEDT,
		MAX(D.STORAGE_NAME) AS STORAGE_NAME,
		MAX(D.DEDT_ADDRESS) AS DEDT_ADDRESS,
		MAX(D.DELIVERY_STATUS) AS
		DELIVERY_STATUS,
		MAX(D.REMARK) AS REMARK,
		MAX(D.CHARGER_CODE) AS
		CHARGER_CODE,
		MAX(D.CHARGER_NAME) AS CHARGER_NAME,
		MAX(D.RGSDE) AS
		RGSDE,
		MAX(D.UPDDE) AS UPDDE,
		MAX(D.TIME) AS TIME,
		SUM(DD.DELIVERY_QY) AS
		TOTAL_DELIVERY_QY,
		SUM(DD.PRICE) AS TOTAL_PRICE,
		MAX(P.PRODUCT_NAME) AS
		PRODUCT_NAME,
		MAX(P.PRODUCT_TYPE) AS PRODUCT_TYPE
		FROM DELIVERY D
		JOIN
		DELIVERY_DETAILS DD
		ON D.DELIVERY_CODE = DD.DELIVERY_CODE
		JOIN
		PRODUCT_INFO P
		ON DD.PRODUCT_CODE = P.PRODUCT_CODE
		WHERE P.PRODUCT_TYPE
		= 'PT02'
		GROUP BY D.DELIVERY_CODE
		ORDER BY D.DELIVERY_CODE DESC
	</select>
	<select id="getDeliProduct"
		resultType="DeliveryDetailsReturnsDTO">
		SELECT P.PRODUCT_NAME ,
		D.PRODUCT_COLOR ,
		D.PRODUCT_SIZE ,
		MAX(P.PRODUCT_TYPE) AS PRODUCT_TYPE,
		MAX(P.VL) AS VL,
		MAX(P.IMG) AS IMG,
		MAX(P.UNIT_NAME) AS UNIT_NAME,
		MAX(D.DELIVERY_PRODUCT_NO) AS
		DELIVERY_PRODUCT_NO,
		MAX(D.DELIVERY_CODE) AS DELIVERY_CODE,
		MAX(D.PRODUCT_CODE) AS PRODUCT_CODE,
		MAX(D.PRODUCT_LOT) AS PRODUCT_LOT,
		MAX(D.REQUEST_QY) AS REQUEST_QY,
		MAX(D.DELIVERY_QY) AS DELIVERY_QY,
		MAX(D.UNIT_PRICE) AS UNIT_PRICE,
		MAX(D.PRODUCT_SE) AS PRODUCT_SE,
		MAX(D.ORDER_CODE) AS ORDER_CODE,
		MAX(D.PRICE) AS PRICE
		FROM
		DELIVERY_DETAILS D JOIN PRODUCT_INFO P
		ON
		D.PRODUCT_CODE =
		P.PRODUCT_CODE
		WHERE D.DELIVERY_CODE = #{deliveryCode}
		AND
		P.PRODUCT_TYPE = 'PT02'
		GROUP BY
		P.PRODUCT_NAME,D.PRODUCT_COLOR,D.PRODUCT_SIZE
	</select>
	
	<!-- 반품 헤더 등록 -->
	<insert id="insertReturn" parameterType="ReturnsDTO">
		<selectKey resultType="String"
			keyProperty="returnCode" order="BEFORE">
			SELECT COALESCE(
			(SELECT CASE
			WHEN LENGTH('RTN' || TO_CHAR(SYSDATE, 'YYMMDD') ||
			LPAD((TO_NUMBER(SUBSTR(MAX(RETURN_CODE), 10)) + 1), 4, 0)) = 9
			THEN null
			ELSE 'RTN' || TO_CHAR(SYSDATE, 'YYMMDD') ||
			LPAD((TO_NUMBER(SUBSTR(MAX(RETURN_CODE), 10)) + 1), 4, 0)
			END
			FROM RETURNS
			WHERE TO_CHAR(REQUEST_DATE, 'YY/MM/DD') = (SELECT
			TO_CHAR(SYSDATE,
			'YY/MM/DD') FROM DUAL)),
			('RTN' || TO_CHAR(SYSDATE,
			'YYMMDD') || '0001')) AS return_code
			FROM DUAL
		</selectKey>
		INSERT INTO RETURNS
		(
			return_code,
			delivery_code,
			company_code,
			company_name,
			requestor,
			request_date
		)
		VALUES(
			#{returnCode},
			#{deliveryCode},
			#{companyCode},
			#{companyName},
			#{requestor},
			sysdate
		)
	</insert>
	
	<!-- 반품 제품 등록 -->
	<insert id="insertProductReturn" parameterType="ReturnsProductDTO">
		INSERT INTO RETURN_PRODUCT
		(
			return_product_no,
			return_code,
			product_code,
			product_name,
			product_color,
			product_size,
			faulty_reason,
			qy,
			requestor,
			request_date,
			return_date,
			processing_status,
			unit_price
		)
		VALUES(
			RETURN_PRODUCT_SEQ.NEXTVAL,
			#{returnCode},
			#{productCode},
			#{productName},
			#{productColor},
			#{productSize},
			#{faultyReason},
			#{qy},
			#{requestor},
			#{requestDate},
			#{returnDate},
			#{processingStatus},
			#{unitPrice}
		)
	</insert>
	
	<!-- 교환 조회 -->
	<select id="getChangeList">
		SELECT 
		    r.RETURN_CODE,
		    r.DELIVERY_CODE,
		    r.COMPANY_CODE,
		    r.COMPANY_NAME,
		    c.COMPANY_CHARGER,
		    c.COMPANY_PHONE,
		    r.REQUESTOR,
		    r.REQUEST_DATE
		FROM RETURNS r
		JOIN RETURN_PRODUCT rp ON r.RETURN_CODE = rp.RETURN_CODE
		JOIN COMPANY c ON r.COMPANY_CODE = c.COMPANY_CODE
		WHERE rp.PROCESSING_STATUS = 'ER02'
		AND rp.SHOW = 'on'
		GROUP BY r.RETURN_CODE, r.DELIVERY_CODE, r.COMPANY_CODE, r.COMPANY_NAME, 
		         c.COMPANY_CHARGER, c.COMPANY_PHONE, r.REQUESTOR, r.REQUEST_DATE
	</select>
	<select id="getChangeProductList">
		SELECT 
		    rp.RETURN_PRODUCT_NO,
		    rp.RETURN_CODE,
		    rp.PRODUCT_CODE,
		    rp.PRODUCT_NAME,
		    rp.PRODUCT_COLOR,
		    rp.PRODUCT_SIZE,
		    rp.FAULTY_REASON,
		    rp.QY,
		    rp.REQUESTOR,
		    rp.REQUEST_DATE,
		    rp.RETURN_DATE,
		    rp.PROCESSING_STATUS,
		    rp.UNIT_PRICE
		FROM RETURN_PRODUCT rp
		JOIN RETURNS r ON rp.RETURN_CODE = r.RETURN_CODE
		WHERE r.RETURN_CODE = #{returnCode}
		AND rp.PROCESSING_STATUS = 'ER02'
		AND rp.SHOW = 'on'
	</select>
	
	<!-- 반품 전체 조회 -->
	<select id="getReturnList">
		select *
		from returns
	</select>
	<select id="getReturnProductList">
		select *
		from return_product	
	</select>
	<!-- 교환 주문 헤더 등록 -->
	<insert id="insertOrder" parameterType="OrderDTO">
		<selectKey resultType="String"
			keyProperty="productOrderCode" order="BEFORE">
			SELECT COALESCE(
			(SELECT CASE
			WHEN LENGTH('POD' || TO_CHAR(SYSDATE, 'YYMMDD') ||
			LPAD((TO_NUMBER(SUBSTR(MAX(PRODUCT_ORDER_CODE), 10)) + 1), 4, 0)) = 9
			THEN null
			ELSE 'POD' || TO_CHAR(SYSDATE, 'YYMMDD') ||
			LPAD((TO_NUMBER(SUBSTR(MAX(PRODUCT_ORDER_CODE), 10)) + 1), 4, 0)
			END
			FROM ORDER_LIST
			WHERE TO_CHAR(ORDER_DATE, 'YY/MM/DD') = (SELECT
			TO_CHAR(SYSDATE,
			'YY/MM/DD') FROM DUAL)),
			('POD' || TO_CHAR(SYSDATE,
			'YYMMDD') || '0001')) AS product_order_code
			FROM DUAL
		</selectKey>
		INSERT INTO ORDER_LIST
		(
		product_order_code,
		company,
		company_representative,
		company_tel,
		charger,
		delivery_request_deadline,
		order_status,
		company_code,
		order_date,
		emp_code,
		remarks,
		amount
		)
		VALUES(
		#{productOrderCode},
		#{companyName},
		#{companyCharger},
		#{companyPhone},
		#{charger},
		sysdate+7,
		'OR01',
		#{companyCode},
		sysdate,
		#{empCode},
		'교환',
		#{amount}
		)
	</insert>
	
	<!-- 교환 주문 제품 등록 -->
	<insert id="insertProductOrder" parameterType="OrderDTO">
		INSERT INTO
		ORDER_PRODUCT
		(
		order_detail_code,
		product_order_code,
		product_code,
		product_color,
		product_size,
		qy,
		unit_price
		)
		VALUES
		(
		ORDER_DETAIL_SEQ.NEXTVAL,
		#{productOrderCode},
		#{productCode},
		#{productColor},
		#{productSize},
		#{qy},
		#{unitPrice}
		)
	</insert>
	
	<!-- 교환 제품 show값 변경 -->
	<update id="showChange" parameterType="showDTO">
        UPDATE RETURN_PRODUCT
        SET SHOW = 'off'
        WHERE return_product_no IN #{returnProductNo}
	</update>
	
	<!-- 반품 제품 조회 -->
	<select id="selectReturnProductList">
		SELECT *
		FROM RETURN_PRODUCT
		WHERE return_code = #{returnCode}
	</select>
	
	<!--  -->
	
</mapper>