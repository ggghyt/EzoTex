<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ezotex.supply.mappers.SupplyMapper">

	<!-- 전체 제품 목록 단순조회 -->
	<select id="listProduct" resultType="ProductDTO" parameterType="ProductDTO">
		SELECT p.product_code,
		       p.product_name,
		       c.lclas,
			   c.sclas
		FROM   product_info p LEFT JOIN product_category c ON p.product_code = c.product_code
		WHERE  p.product_type = 'PT02' 
		<if test='productCode != null and productCode != ""'> AND UPPER(p.product_code) LIKE '%' || UPPER(#{productCode}) || '%' </if> 
		<if test='productName != null and productName != ""'> AND UPPER(p.product_name) LIKE '%' || UPPER(#{productName}) || '%'	</if> 
		<if test='lclas != null and lclas != "null"'> AND c.lclas = #{lclas}	</if> 
		<if test='sclas != null and sclas != "null"'> AND c.sclas = #{sclas}	</if> 
		ORDER  BY product_code DESC
	</select>
	
	<!-- 해당 제품의 전체 옵션 목록 (사이즈/색상 중 한 가지만 있거나 단일 제품인 경우 필요) -->
	<select id="findOptions" resultType="ProductDTO">
		SELECT product_size,
		       get_comm(product_size) AS size_name,
		       product_color
		FROM   product_option
		WHERE  product_code = #{productCode}
		  AND  discontinued = 'YN02'
		ORDER BY product_color, product_size
	</select>
	
	<!-- (서비스) 해당 제품의 사이즈 배열 반환용 -->
	<select id="findSize" resultType="ProductDTO">
		SELECT product_size,
		       get_comm(product_size) AS size_name
		FROM   product_option
		WHERE  product_code = #{productCode}
		  AND  discontinued = 'YN02'
		GROUP  BY product_code, product_size
		--ORDER  BY TO_NUMBER(SUBSTR(product_size, 3))
	</select>
	
	<!-- 제품코드 기반 옵션 빈 PIVOT -->
	<select id="pivotProductOption" resultType="map">
		WITH temp AS( -- 임시 테이블 지정
		SELECT product_color,
		       product_size,
		       option_code
		FROM   product_option
		WHERE  product_code = #{productCode}
		)
		SELECT  *
		FROM temp
		PIVOT( COUNT(option_code) -- 0이면 해당 색상엔 존재하지 않는 사이즈
		    FOR product_size IN ( -- '값' alias, ... 열과 행을 바꿔 선택한 컬럼으로 그룹함수 실행
		    	<foreach collection="sizeList" item="size" separator=",">
		       	 '${size.productSize}' as "${size.sizeName}"
		      </foreach>
		    )
		)pvt
		ORDER BY product_color
	</select>
	
	<!-- 공급계획서 조회 -->
	<select id="listSupplyPlan" resultType="SupplyDTO" parameterType="map">
	  SELECT * FROM (
	    SELECT DISTINCT(p.supply_plan_code),
	           p.supply_year,
	           get_comm(p.season) season,
	           product_summary('supply_plan_details', p.supply_plan_code) summary, 
	           (SELECT SUM(supply_qy) 
	            FROM   supply_plan_details
	            WHERE  supply_plan_code = p.supply_plan_code) supply_qy,
	           p.charger_code,
	           p.charger_name,
	           p.remark,
	           p.rgsde,
	           p.update_date
	    FROM   supply_plan p JOIN supply_plan_details d ON p.supply_plan_code = d.supply_plan_code 
	    <where>
	       <if test='season != null'> AND p.season IN ( <foreach collection="season" item="se" separator=", "> #{se} </foreach> ) </if>
	       <if test='seasonNull != null'> OR p.season IS NULL </if>
	       <if test='productCode != null and productCode != ""'> AND UPPER(d.product_code) LIKE '%' || UPPER(#{productCode}) || '%' </if> 
	       <if test='productName != null and productName != ""'> AND UPPER(get_prd_name(d.product_code)) LIKE '%' || UPPER(#{productName}) || '%' </if> 
	       
	       <if test='supplyDateMin != null and supplyDateMin != ""'> AND  TO_CHAR(d.supply_date, 'yyyy-mm-dd') >= #{supplyDateMin} </if> 
	       <if test='supplyDateMax != null and supplyDateMax != ""'> AND  TO_CHAR(d.supply_date, 'yyyy-mm-dd') <![CDATA[<= #{supplyDateMax}]]> </if> 
	    </where>
	  ) -- 서브쿼리 형태로 alias 사용 가능
	  <where>
	    <if test='supplyPlanCode != null and supplyPlanCode != ""'> AND UPPER(supply_plan_code) LIKE '%' || UPPER(#{supplyPlanCode}) || '%' </if>
	    <if test='supplyYear != null and supplyYear != ""'> AND supply_year = #{supplyYear} </if>
	    <if test='supplyQyMin != null and supplyQyMin != ""'> AND supply_qy >= #{supplyQyMin} </if>
	    <if test='supplyQyMax != null and supplyQyMax != ""'> AND supply_qy <![CDATA[<= #{supplyQyMax}]]> </if>
	    <if test='chargerName != null and chargerName != ""'> AND UPPER(charger_name) LIKE '%' || UPPER(#{chargerName}) || '%' </if>
	    <if test='remark != null and remark != ""'> AND UPPER(remark) LIKE '%' || UPPER(#{remark}) || '%' </if>
	    
	    <if test='rgsdeMin != null and rgsdeMin != ""'> AND  TO_CHAR(NVL(update_date, rgsde), 'yyyy-mm-dd') >= #{rgsdeMin} </if> 
	    <if test='rgsdeMax != null and rgsdeMax != ""'> AND  TO_CHAR(NVL(update_date, rgsde), 'yyyy-mm-dd') <![CDATA[<= #{rgsdeMax}]]> </if> 
	  </where>
	  ORDER  BY supply_plan_code DESC
	</select>
	
	<!-- 공급계획서 조회 개수 -->
	<select id="countSupplyPlan" parameterType="map">
	  SELECT COUNT(*) FROM (
	    SELECT DISTINCT(p.supply_plan_code),
	           p.supply_year,
	           get_comm(p.season) season,
	           (SELECT SUM(supply_qy) 
	            FROM   supply_plan_details
	            WHERE  supply_plan_code = p.supply_plan_code) supply_qy,
	           p.charger_name,
	           p.remark,
	           p.rgsde,
	           p.update_date
	    FROM   supply_plan p JOIN supply_plan_details d ON p.supply_plan_code = d.supply_plan_code 
	    <where>
	       <if test='season != null'> AND p.season IN ( <foreach collection="season" item="se" separator=", "> #{se} </foreach> ) </if>
	       <if test='productCode != null and productCode != ""'> AND UPPER(d.product_code) LIKE '%' || UPPER(#{productCode}) || '%' </if> 
	       <if test='productName != null and productName != ""'> AND UPPER(get_prd_name(d.product_code)) LIKE '%' || UPPER(#{productName}) || '%' </if> 
	       
	       <if test='supplyDateMin != null and supplyDateMin != ""'> AND  TO_CHAR(d.supply_date, 'yyyy-mm-dd') >= #{supplyDateMin} </if> 
	       <if test='supplyDateMax != null and supplyDateMax != ""'> AND  TO_CHAR(d.supply_date, 'yyyy-mm-dd') <![CDATA[<= #{supplyDateMax}]]> </if> 
	    </where>
	  ) -- 서브쿼리 형태로 alias 사용 가능
	  <where>
	    <if test='supplyPlanCode != null and supplyPlanCode != ""'> AND UPPER(supply_plan_code) LIKE '%' || UPPER(#{supplyPlanCode}) || '%' </if>
	    <if test='supplyYear != null and supplyYear != ""'> AND supply_year = #{supplyYear} </if>
	    <if test='supplyQyMin != null and supplyQyMin != ""'> AND supply_qy >= #{supplyQyMin} </if>
	    <if test='supplyQyMax != null and supplyQyMax != ""'> AND supply_qy <![CDATA[<= #{supplyQyMax}]]> </if>
	    <if test='chargerName != null and chargerName != ""'> AND UPPER(charger_name) LIKE '%' || UPPER(#{chargerName}) || '%' </if>
	    <if test='remark != null and remark != ""'> AND UPPER(remark) LIKE '%' || UPPER(#{remark}) || '%' </if>
	    
	    <if test='rgsdeMin != null and rgsdeMin != ""'> AND  TO_CHAR(NVL(update_date, rgsde), 'yyyy-mm-dd') >= #{rgsdeMin} </if> 
	    <if test='rgsdeMax != null and rgsdeMax != ""'> AND  TO_CHAR(NVL(update_date, rgsde), 'yyyy-mm-dd') <![CDATA[<= #{rgsdeMax}]]> </if> 
	  </where>
	</select>
	
	<!-- 공급계획서 상세조회 -->
	<select id="infoSupplyPlan">
	    SELECT product_code,
		       get_prd_name(product_code) product_name,
		       SUM(supply_qy) supply_qy,
		       supply_date,
		       supply_plan_code
		FROM   supply_plan_details
		<where>
		  <if test='supplyPlanCode != null'>AND supply_plan_code = #{supplyPlanCode}</if>
		  <if test='productCode != null'>AND product_code IN ( SELECT b.product_code 
					                        FROM   bom b JOIN supply_plan_details sd ON b.product_code = sd.product_code
					                                     JOIN bom_details d ON b.bom_code = d.bom_code
					                                      AND b.bom_code = (SELECT MAX(b.bom_code) FROM bom b WHERE b.product_code = sd.product_code)
					                        WHERE  d.mtril_code = #{productCode} )</if>
		</where>
		GROUP  BY product_code, supply_date, supply_plan_code
		ORDER  BY product_code DESC
	</select>
	
	<!-- 제품 코드 기반 집계 목록 (사이즈별) -->
	<select id="pivotProductSupply" resultType="map">
	  WITH temp AS( -- 임시 테이블 지정
	  SELECT d.product_color, -- o로 변경 필요
	         d.product_size,
	         d.supply_qy
	  FROM   supply_plan s JOIN supply_plan_details d ON s.supply_plan_code = d.supply_plan_code
	                       LEFT JOIN product_option o ON d.product_code = o.product_code
	                                                 AND d.product_size = o.product_size
	                                                 AND d.product_color = o.product_color
	  WHERE  d.product_code = #{dto.productCode}
	    <if test='dto.supplyPlanCode != null and dto.supplyPlanCode != ""'>AND  s.supply_plan_code = #{dto.supplyPlanCode}</if>
	  )
	  SELECT  product_color, <!-- null이어도 값이 표시되게 함 -->
	        <foreach collection="sizeList" item="size" separator=",">
	          NVL("${size.sizeName}", 0) as "${size.sizeName}"
	        </foreach>
	  FROM temp
	  PIVOT( SUM(supply_qy) -- 열과 행을 바꿔 선택한 컬럼으로 그룹함수 실행
	      FOR product_size IN ( -- '값' alias, ...
	         <foreach collection="sizeList" item="size" separator=",">
	            '${size.productSize}' as "${size.sizeName}"
	         </foreach>
	      )
	  )pvt
	  ORDER BY product_color
	</select>
	
    <!-- 제품 코드 기반 집계 목록 (색상 or 사이즈만 있는 경우) -->
	 <select id="listProductSupply" resultType="map">
	   SELECT o.product_color,
	          o.product_size,
	          get_comm(o.product_size) size_name,
		   d.supply_qy
		FROM   product_option o LEFT JOIN supply_plan_details d ON d.product_code = o.product_code
		                                                       AND d.supply_plan_code = #{supplyPlanCode}
		                                                       AND (d.product_color = o.product_color
		                                                          OR d.product_size = o.product_size)
		WHERE  o.product_code = #{productCode}
	 </select>
	
	<!-- 공급계획 등록(헤더) -->
	<insert id="insertSupplyPlan" parameterType="SupplyDTO">
		INSERT INTO supply_plan (supply_plan_code, supply_year, season, charger_code, charger_name, remark) 
		VALUES ((SELECT 'SUP' || LPAD(NVL(SUBSTR(MAX(supply_plan_code), -4), 0) + 1, 4, 0) FROM supply_plan),
		         #{supplyYear}, #{season}, #{chargerCode}, #{chargerName}, #{remark})
	</insert>
	
	<!-- 공급계획 등록(디테일) -->
	<insert id="insertSupplyPlanDetail" parameterType="SupplyDTO">
		INSERT INTO supply_plan_details (supply_plan_detail_code, supply_plan_code, product_code, product_color, product_size, supply_qy, supply_date) 
		VALUES ((SELECT NVL(MAX(supply_plan_detail_code), 0) + 1 FROM supply_plan_details), -- 다음 번호 조회
		        (SELECT MAX(supply_plan_code) FROM supply_plan), #{productCode}, #{productColor}, #{productSize}, #{supplyQy}, #{supplyDate})
	</insert>
	
	<!-- 자재소요계획 조회 -->
	<select id="listMrp" resultType="SupplyDTO" parameterType="SupplyDTO">
	    SELECT bd.mtril_code product_code, 
		       i.product_name product_name,
		       bd.mtril_color product_color,
		       get_comm(i.unit_name) unit_name,
		       SUM(bd.require_qy * sd.supply_qy) supply_qy,
		       sd.supply_date
		FROM   supply_plan s JOIN supply_plan_details sd ON s.supply_plan_code = sd.supply_plan_code
		                     JOIN bom b ON b.product_code = sd.product_code
		                               AND b.bom_code = (SELECT MAX(bom_code) FROM bom WHERE product_code = sd.product_code)
		                     JOIN bom_details bd ON b.bom_code = bd.bom_code
		                     JOIN product_info i ON bd.mtril_code = i.product_code
		<where>
		  <if test='supplyYear != null and supplyYear != ""'>AND s.supply_year = #{supplyYear}</if>
		  <if test='supplyYear != null and supplyYear != "" and supplyMonth != null and supplyMonth != ""'>
		     AND TO_CHAR(sd.supply_date, 'yyyy-mm') = #{supplyYear} || '-' || LPAD(#{supplyMonth}, 2, 0)
		  </if>
		  <if test='season != "null" and season != null and season != ""'>AND s.season = #{season}</if>
		</where>
		GROUP  BY bd.mtril_code, i.product_name, bd.mtril_color, i.unit_name, sd.supply_date
		ORDER  BY product_code DESC, supply_date, product_color
	</select>
	
</mapper>